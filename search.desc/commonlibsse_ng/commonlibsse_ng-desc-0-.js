searchState.loadedDescShard("commonlibsse_ng", 0, "This is a Rust reimplementation of CommonLibSSE-NG.\nREL dir portion of <code>CommonLibSSE-NG</code> written by hand.\nModule related to Win32 API\nModule related to SKSE.exe (version information of …\nA trait for resolving an absolute address based on an …\nComputes the absolute address by adding the offset to the …\nRetrieves the base address of the module.\nModule handling library for Skyrim SE/AE/VR .\nReturns the offset associated with this instance.\nFailed to locate an appropriate address library at: {path}\nErrors that can occur during the file loading process.\nFailed to unpack file at: {source}\nRepresents different formats of the address library.\nInherited header parsing error.\nRepresents an ID that can be used to look up an address in …\nRepresents a memory mapping ID and offset.\nFailed to create shared mapping\nInherited memory mapping error.\nInherited module state(manager) get error.\nFailed to find the id within the address library: {id}. …\nMaps memory offsets to unique IDs using a sorted list for …\nA thread that was taking database locks panicked.\nRepresents an ID that varies based on runtime format.\nRepresents an ID with a possible VR-specific offset.\nVersion mismatch\nRetrieves the absolute address corresponding to the ID.\nRetrieves the absolute address corresponding to the ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the ID corresponding to the given <code>offset</code>, if …\nRetrieves the appropriate ID based on the runtime format.\nThe unique ID of the memory-mapped file.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Offset2ID</code> instance by loading the …\nCreates a new RelocationID instance.\nCreates a new VariantID instance.\nCreates a new <code>ID</code> instance with the given value.\nRetrieves the offset corresponding to the ID.\nRetrieves the offset corresponding to the ID.\nRetrieves the offset corresponding to the ID.\nThe memory address offset within the mapped region.\nFailed to close handle: {source}\nFailed to create memory mapping: {source}\nContains the error value\nContains the error value\nA type alias for the result of a lock method which can be …\nFailed to map view of file.\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nDefines errors that may occur when working with <code>MemoryMap</code>.\nContains the success value\nContains the success value\nFailed to open memory mapping: {source}\nA type of error which can be returned whenever a lock is …\nThe lock could not be acquired because another thread …\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nIt exists in the SharedMemory situation and atomically …\nAn enumeration of possible errors associated with a …\nA type alias for the result of a nonblocking locking …\nFailed to unmap memory view: {source}\nThe lock could not be acquired at this time because the …\nClear the poisoned state from a lock.\nDowngrades a write-locked <code>RwLockWriteGuard</code> into a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReaches into this error indicating that a lock is …\nReaches into this error indicating that a lock is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this error indicating that a lock is poisoned, …\nDetermines whether the lock is poisoned.\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nMakes a <code>MappedRwLockWriteGuard</code> for a component of the …\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nMakes a <code>MappedRwLockWriteGuard</code> for a component of the …\nCreates a <code>PoisonError</code>.\nAllocate <code>T</code> array shared memory. (T * <code>len</code>)\nLocks this <code>RwLock</code> with shared read access, blocking the …\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nMakes a <code>MappedRwLockWriteGuard</code> for a component of the …\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nMakes a <code>MappedRwLockWriteGuard</code> for a component of the …\nAttempts to acquire this <code>RwLock</code> with shared read access.\nAttempts to lock this <code>RwLock</code> with exclusive write access.\nLocks this <code>RwLock</code> with exclusive write access, blocking …\nThe module is successfully initialized and active.\nThe Skyrim runtime is a post-Anniversary Edition Skyrim SE …\nThe module instance has been explicitly cleared and memory …\nWritable data section (typically <code>.data</code>).\nThe module failed to initialize.\nModule initialization error\nGlobal function identifiers section (typically <code>.gfids</code>).\nFailed to get module handle for ‘{source}’\nInitialized data section (typically <code>.idata</code>).\nInvalid dos header of this exe/dll. Expected <code>0x5a4d</code>, but …\nInvalid NT header64.  Expected <code>PE\\0\\0</code>(0x4550), but got …\nRepresents a loaded module in memory.\nWrapper type to safely hold and handle valid handle …\nError types for module handle operations.\nModule has been cleared\nErrors that can occur during module initialization.\nThe thread that was getting Module’s lock panicked.\nSKSE or Skyrim exe does not exist or is not loaded into …\nRepresents the state of the module.\nType definition for treating an instance of information …\nInvalid module handle.\nException handling metadata section (typically <code>.pdata</code>).\nRead-only data section (typically <code>.rdata</code>).\nDefines Skyrim runtime versions.\nThe Skyrim runtime is a pre-Anniversary Edition Skyrim SE …\nRepresents a memory segment in a module.\nModule handle operation failed during segment search -&gt; …\nRepresents different sections in a binary executable.\nWritable text section (uncommon, but may exist for …\nExecutable code section (typically <code>.text</code>).\nThread-local storage section (typically <code>.tls</code>).\nTotal number of sections (used for iteration or bounds …\nFailed to load version information. -&gt; {source}\nThe Skyrim runtime is Skyrim VR.\nVirtual address of the segment.\nReturns the module handle itself (i.e., the virtual …\nBase module handle if available.\nFile path of the module. (e.g. <code>&quot;SkyrimSE.exe&quot;</code>)\nName of the module. (e.g. <code>&quot;SkyrimSE.exe&quot;</code>)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the runtime from version.\nGet the runtime from version, strictly matching predefined …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the current Skyrim runtime the Anniversary Edition (AE)?\nIs the current Skyrim runtime the Special Edition (SE).\nIs the current Skyrim runtime the VR version?\nAttempts to apply a function to the active module state.\nAttempts to apply a function to the active module state, …\nGets the module handle of a module (exe, dll, etc.) that …\nCreates a new segment instance.\nComputes the offset of the segment from the proxy base.\nBase address of the proxy module.\nClears the module, transitioning it to the <code>Cleared</code> state.\nRuntime type of the module.\nGets a specific memory segment by <code>SegmentName</code>.\nSize of the segment in bytes.\nReturns the raw HMODULE handle.\nAttempt to parse NT Header part.\nVersion information of the module.\nRepresents an offset that can be used to compute an …\nRepresents an offset that varies depending on the runtime …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Offset</code> instance with the given value.\nCreates a new <code>VariantOffset</code> instance with specified …\nReturns the stored offset value.\nRetrieves the offset based on the current runtime.\nErrors\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an instance from two resolvable addresses.\nPanics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nErrors\nErrors\nError types for file version retrieval.\nExpected a number but got invalid character: <code>{character}</code>\nExpected numbers after the dots, but got none in part …\nExpected at most 4 parts, but got {parts} parts\nRepresents a 4-part version number.\nFailed to retrieve file version info for ‘{filename}’, …\nFailed to get file version info size for ‘{filename}’\nFailed to query product version for ‘{filename}’. …\nReturns the build version component.\nCreate a empty version.\nParses a version string at compile time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the file version of the specified executable or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the major version component.\nReturns the minor version component.\nCreates a new <code>Version</code> from four components.\nPacks the version into a 32-bit integer.\nReturns the patch version component.\nUnpacks a 32-bit integer into a <code>Version</code>.\nA structure representing a 64-bit unsigned integer that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ULargeInteger</code> from a <code>u64</code> value.\nReturns a tuple <code>(high, low)</code>, where:\nReturns the higher 32 bits as a <code>u32</code>.\nReturns the lower 32 bits as a <code>u32</code>.\nReturns the original 64-bit value.\nThe latest version of SE, AE.")